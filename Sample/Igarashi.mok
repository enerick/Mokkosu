#============================================================
#! @file   Igarashi.mok
#! @brief  型推論のテストケース
#!
#!   京都大学の五十嵐淳先生の実験の型推論実行例
#!   http://www.fos.kuis.kyoto-u.ac.jp/~t-sekiym/classes/isle4/testcases.html
#!
#! @author Sho, lambdataro
#============================================================

# 1 + 2
let test01 = 1 + 2;

# -2 * 2
let test02 = ~-2 * 2;

# 1 < 2
let test03 = 1 < 2;

# fun x -> x
let test04 = \x -> x;

# fun x -> fun y -> x
let test05 = \x y -> x;

# fun x -> fun y -> y
let test06 = \x y -> y;

# (fun x -> x + 1) 2 + (fun x -> x + -1) 3
let test07 = (\x -> x + 1) 2 + (\x -> x + ~-1) 3;

# fun f -> fun g -> fun x -> g (f x)
let test08 = \f g x -> g (f x);

# fun x -> fun y -> fun z -> x z (y z)
let test09 = \x y z -> x z (y z);

# fun x -> let y = x + 1 in x
let test10 = \x -> let y = x + 1 in x;

# fun x -> let y = x + 1 in y
let test11 = \x -> let y = x + 1 in y;

# fun b -> fun x -> if x b then x else (fun x -> b)
let test12 = \b x -> if x b -> x else (\x -> b);

# fun x -> if true then x else (if x then true else false)
let test13 = \x -> if true -> x else (if x -> true else false);

# fun x -> fun y -> if x then x else y
let test14 = \x y -> if x -> x else y;

# fun n -> (fun x -> x (fun y -> y)) (fun f -> f n)
let test15 = \n -> (\x -> x (\y -> y)) (\f -> f n);

# fun x -> fun y -> x y
let test16 = \x y -> x y;

# fun x -> fun y -> x (y x)
let test17 = \x y -> x (y x);

# fun x -> fun y -> x (y x) (y x)
let test18 = \x y -> x (y x) (y x);

# fun x -> fun y -> fun z -> x (z x) (y (z x y))
let test19 = \x y z -> x (z x) (y (z x y));

# let id = fun x -> x in let f = fun y -> id (y id) in f
let _id = \x -> x;
let _f = \y -> id (y id);
let test20 = _f;

# let k = fun x -> fun y -> x in let k1 = fun x -> fun y -> k (x k) in k1
let _k = \x y -> x;
let _k1 = \x y -> _k (x _k);
let test21 = _k1;

# let s = fun x -> fun y -> fun z -> x z (y z) in let s1 = fun x -> fun y -> fun z -> x s (z s) (y s (z s)) in s1
let _s = \x y z -> x z (y z);
let _s1 = \x y z -> x _s (z _s);
let test22 = _s1;

# let g = fun h -> fun t -> fun f -> fun x -> f h (t f x) in g
let _g = \h t f x -> f h (t f x);
let test23 = _g;

# let s = fun x -> fun y -> fun z -> x z (y z) in let k = fun x -> fun y -> x in let k' = fun x -> fun y -> x in s k k';;
let _s = \x y z -> x z (y z);
let _k = \x y -> x;
let _k2 = \x y -> x;
let test24 = \x -> _s _k _k2 x;

# let s = fun x -> fun y -> fun z -> x z (y z) in let k = fun x -> fun y -> x in s k k
let _s = \x y z -> x z (y z);
let _k = \x y -> x;
let test25 = \x -> _s _k _k x;

# let s = fun x -> fun y -> fun z -> x z (y z) in let k' = fun x -> fun y -> y in s k' k'
let _s = \x y z -> x z (y z);
let _k2 = \x y -> y;
let test26 = \x -> _s _k2 _k2 x;

# fun x -> fun y -> fun z -> let b = x y z in if b then z y else y
let test27 = \x y z -> let b = x y z in if b -> z y else y;

# let pair = fun x1 -> fun x2 -> fun y -> y x1 x2 in let proj1 = fun p -> p (fun x1 -> fun x2 -> x1) in
# let proj2 = fun p -> p (fun x1 -> fun x2 -> x2) in proj1 (pair 1 100)
let _pair = \x1 x2 y -> y x1 x2;
let _proj1 = \p -> p (\x1 x2 -> x1);
let _proj2 = \p -> p (\x1 x2 -> x2);
let test28 = _proj1 (_pair 1 100);

# let pair = fun x1 -> fun x2 -> fun y -> y x1 x2 in let proj1 = fun p -> p (fun x1 -> fun x2 -> x1) in
# let proj2 = fun p -> p (fun x1 -> fun x2 -> x2) in proj1 (proj2 (pair 10 (pair 20 30)))
let _pair = \x1 x2 y -> y x1 x2;
let _proj1 = \p -> p (\x1 x2 -> x1);
let _proj2 = \p -> p (\x1 x2 -> x2);
let test29 = _proj1 (_proj2 (_pair 10 (_pair 20 30)));

# let f = fun x -> x in if f true then f 1 else f 2
let _f = \x -> x;
let test30 = if _f true -> _f 1 else _f 2;

# let f = fun x -> 3 in f true + f 4
let _f = \x -> 3;
let test31 = _f true + _f 4;

# fun b -> let f = fun x -> x in let g = fun y -> y in if b then f g else g f
let test32 = \b -> let f = \x -> x in let g = \y -> y in if b -> f g else g f;

# fun b -> fun f -> let g1 = fun x -> x f in let g2 = fun x -> x f in fun z -> if b then g1 z g2 else g2 z g1;;
let test33 = \b f -> let g1 = \x -> x f in let g2 = \x -> x f in \z -> if b -> g1 z g2 else g2 z g1;

# let rec f = fun x -> f x in f
fun _f x = _f x;
let test34 = _f;

# let rec f = fun x -> f (f x) in f
fun _f x = _f (_f x);
let test35 = _f;

# let rec fix_fun = fun g -> fun x -> g (fix_fun g) x in fix_fun
fun _fix_fun g x = g (_fix_fun g) x;
let test36 = _fix_fun;

# fun f -> let rec x = fun z -> f (x z) in x 666
let test37 = \f -> fun x z = f (x z) in x 666;

# let rec f = fun x -> fun y -> if x < 0 then y else f (x + -1) y in f
fun _f x y = if x < 0 -> y else _f (x + ~-1) y;
let test38 = _f;

# fun f -> fun g -> let rec h = fun x -> h (g (f x)) in h
let test39 = \f g -> fun h x = h (g (f x)) in h;

# let rec loop = fun f -> fun x -> (loop f) (f x) in loop
fun _loop f x = (_loop f) (f x);
let test40 = _loop;

# fun x -> let rec f = fun y -> x + 1 in x
let test41 = \x -> fun f y = x + 1 in x;

# let rec ind = fun x -> fun f -> fun n -> if n < 1 then x else f (ind x f (n + -1)) in ind
fun _ind x f n = if n < 1 -> x else f (_ind x f (n + ~-1));
let test42 = _ind;

# []
let test43 = [];

# [] :: []
let test44 = [] :: [];

# fun x -> fun y -> x :: y
let test45 = \x y -> x :: y;

# fun x -> fun f -> f (f x :: [])
let test46 = \x f -> f (f x :: []);

# fun x -> match x with [] -> 0 | h :: t -> h
let test47 = \x -> match x { [] -> 0; h :: t -> h };

# 1 + true
# let fail01 = 1 + true;

# 2 + (fun x -> x)
# let fail02 = 2 + (\x -> x);

# -2 * false
# let fail03 = ~-2 * false;

# fun x -> x x;;
# let fail04 = \x -> x x;

# let f = fun x -> fun g -> g (x x g) in f f
# let _f = \x g -> g (x x g);
# let fail05 = _f _f;

# let g = fun f -> fun x -> f x (f x) in g
# let _g = \f x -> f x (f x);
# let fail06 = _g;

# let g = fun f -> fun x -> f x (x f) in g
# let _g = \f x -> f x (x f);
# let fail07 = _g;

# fun x -> fun y -> x y + y x
# let fail08 = \x y -> x y + y x;

# fun x -> fun y -> x y + x
# let fail09 = \x y -> x y + x;

# fun x -> fun y -> if x y then x else y
# let fail10 = \x y -> if x y -> x else y;

# fun x -> fun y -> if x y then (fun z -> if y z then z else x) else (fun x -> x)
# let fail11 = \x y -> if x y -> (\z -> if y z -> z else x) else (\x -> x);

# fun x -> fun y -> fun z -> let b = x y z in if b then z y else z x
# let fail12 = \x y z -> let b = x y z in if b -> z y else z x;

# fun x -> fun y -> fun z -> if x y then z x else y z
# let fail13 = \x y z -> if x y -> z x else y z;

# fun x -> if x then 1 else x
# let fail14 = \x -> if x -> 1 else x;

# (fun x -> x + 1) true
# let fail15 = (\x -> x + 1) true;

# fun x -> fun y -> y (x (y x))
# let fail16 = \x y -> y (x (y z));

# (fun f -> fun x -> f (f x)) (fun x -> fun y -> x)
# let fail17 = (\f x -> f (f x)) (\x y -> x);

# fun x -> fun y -> y (x (fun z1 -> fun z2 -> z1)) (x (fun z -> z))
# let fail18 = \x y -> y (x (\z1 z2 -> z1)) (x (\z -> z));

# fun b -> fun f -> let g1 = fun x -> f x in let g2 = fun x -> f x in if b then g1 g2 else g2 g1
# let fail19 = \b f -> let g1 = \x -> f x in let g2 = \x -> f x in if b -> g1 g2 else g2 g1;

# let rec f = fun x -> f in f
# fun _f x = _f;
# let fail20 = _f;

# let rec looq = fun f -> fun x -> (looq f) (x f) in looq
# fun _looq f x = (_looq f) (x f);
# let fail21 = _looq;

# let rec f = fun x -> f (x f) in f
# fun _f x = _f (x _f);
# let fail22 = _f;

# let rec f = fun z -> f z (fun g -> fun h -> h (g h)) in f
# fun _f z = _f z (\g h -> h (g h));
# let fail23 = _f;

# fun x -> x :: x
# let fail24 = \x -> x :: x;

# fun x -> fun y -> x :: x y
# let fail25 = \x y -> x :: x y;

# fun x -> fun y -> fun z -> x y :: z x :: y z :: []	
# let fail26 = \x y z -> x y :: z x :: y z :: [];

# fun x -> match x with [] -> 0 | h :: t -> x :: t
# let fail27 = \x -> match x { [] -> 0; h :: t -> x :: t };
